# frozen_string_literal: true

# stolen from https://gist.githubusercontent.com/schickling/6762581/raw/f0669da3d55042c74152b1c9c6330592c1102508/Rakefile
require 'active_record'

DB_CONFIG       = YAML.load(File.open('config/database.yml'))
DB_CONFIG_TEST  = DB_CONFIG.merge('database' => 'gaintain-test')
DB_CONFIG_ADMIN = DB_CONFIG.merge('database' => 'postgres', 'schema_search_path' => 'public')

namespace :db do
  desc 'Create the database'
  task :create do
    DatabaseTasks.create(DB_CONFIG)
  end

  desc 'Migrate the database'
  task :migrate do
    DatabaseTasks.migrate(DB_CONFIG)
  end

  desc 'Rollback the database'
  task :rollback do
    DatabaseTasks.rollback(DB_CONFIG)
  end

  desc 'Drop the database'
  task :drop do
    DatabaseTasks.drop(DB_CONFIG)
  end

  desc 'Reset the database'
  task reset: %i[drop create migrate]

  desc 'Create the test database'
  task :create_test do
    DatabaseTasks.create(DB_CONFIG_TEST)
  end

  desc 'Migrate the test database'
  task :migrate_test do
    DatabaseTasks.migrate(DB_CONFIG_TEST)
  end

  desc 'Rollback the test database'
  task :rollback_test do
    DatabaseTasks.rollback(DB_CONFIG_TEST)
  end

  desc 'Drop the test database'
  task :drop_test do
    DatabaseTasks.drop(DB_CONFIG_TEST)
  end

  desc 'Reset the test database'
  task reset_test: %i[drop_test create_test migrate_test]

  desc 'Create a db/schema.rb file that is portable against any DB supported by AR'
  task :schema do
    ActiveRecord::Base.establish_connection(DB_CONFIG)
    require 'active_record/schema_dumper'
    filename = 'db/schema.rb'
    File.open(filename, 'w:utf-8') do |file|
      ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
    end
  end
end

namespace :g do
  desc 'Generate migration'
  task :migration do
    name = ARGV[1] || raise('Specify name: rake g:migration your_migration')
    timestamp = Time.now.strftime('%Y%m%d%H%M%S')
    path = File.expand_path("db/migrations/#{timestamp}_#{name}.rb", __dir__)
    migration_class = name.split('_').map(&:capitalize).join

    File.open(path, 'w') do |file|
      file.write <<~RUBY
        class #{migration_class} < ActiveRecord::Migration
          def change
          end
        end
      RUBY
    end

    puts "Migration #{path} created"
    abort # needed stop other tasks
  end
end

task :console do
  ActiveRecord::Base.establish_connection(DB_CONFIG)
  require './server'
  # rubocop:disable Lint/Debugger
  binding.irb
  # rubocop:enable Lint/Debugger
end

module DatabaseTasks
  # Helper module for database tasks
  class << self
    def create(db_config)
      ActiveRecord::Base.establish_connection(DB_CONFIG_ADMIN)
      ActiveRecord::Base.connection.create_database(db_config['database'])
      puts 'Database created.'
    end

    def migrate(db_config)
      ActiveRecord::Base.establish_connection(db_config)
      ActiveRecord::MigrationContext.new('db/migrations').migrate
      Rake::Task['db:schema'].invoke
      puts 'Database migrated.'
    end

    def rollback(db_config)
      ActiveRecord::Base.establish_connection(db_config)
      ActiveRecord::MigrationContext.new('db/migrations').rollback
      Rake::Task['db:schema'].invoke
      puts 'Database rolled back.'
    end

    def drop(db_config)
      ActiveRecord::Base.establish_connection(DB_CONFIG_ADMIN)
      ActiveRecord::Base.connection.drop_database(db_config['database'])
      puts 'Database deleted.'
    end
  end
end
