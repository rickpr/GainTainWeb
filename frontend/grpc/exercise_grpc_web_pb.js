/**
 * @fileoverview gRPC-Web generated client stub for gaintain
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.21.12
// source: exercise.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.gaintain = require('./exercise_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gaintain.ExerciseServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.gaintain.ExerciseServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gaintain.ExercisesRequest,
 *   !proto.gaintain.Exercises>}
 */
const methodDescriptor_ExerciseService_ListExercises = new grpc.web.MethodDescriptor(
  '/gaintain.ExerciseService/ListExercises',
  grpc.web.MethodType.UNARY,
  proto.gaintain.ExercisesRequest,
  proto.gaintain.Exercises,
  /**
   * @param {!proto.gaintain.ExercisesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gaintain.Exercises.deserializeBinary
);


/**
 * @param {!proto.gaintain.ExercisesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gaintain.Exercises)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gaintain.Exercises>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gaintain.ExerciseServiceClient.prototype.listExercises =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gaintain.ExerciseService/ListExercises',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_ListExercises,
      callback);
};


/**
 * @param {!proto.gaintain.ExercisesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gaintain.Exercises>}
 *     Promise that resolves to the response
 */
proto.gaintain.ExerciseServicePromiseClient.prototype.listExercises =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gaintain.ExerciseService/ListExercises',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_ListExercises);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gaintain.NewExercise,
 *   !proto.gaintain.Exercise>}
 */
const methodDescriptor_ExerciseService_CreateExercise = new grpc.web.MethodDescriptor(
  '/gaintain.ExerciseService/CreateExercise',
  grpc.web.MethodType.UNARY,
  proto.gaintain.NewExercise,
  proto.gaintain.Exercise,
  /**
   * @param {!proto.gaintain.NewExercise} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gaintain.Exercise.deserializeBinary
);


/**
 * @param {!proto.gaintain.NewExercise} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gaintain.Exercise)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gaintain.Exercise>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gaintain.ExerciseServiceClient.prototype.createExercise =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gaintain.ExerciseService/CreateExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_CreateExercise,
      callback);
};


/**
 * @param {!proto.gaintain.NewExercise} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gaintain.Exercise>}
 *     Promise that resolves to the response
 */
proto.gaintain.ExerciseServicePromiseClient.prototype.createExercise =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gaintain.ExerciseService/CreateExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_CreateExercise);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gaintain.ExerciseRequest,
 *   !proto.gaintain.Exercise>}
 */
const methodDescriptor_ExerciseService_GetExercise = new grpc.web.MethodDescriptor(
  '/gaintain.ExerciseService/GetExercise',
  grpc.web.MethodType.UNARY,
  proto.gaintain.ExerciseRequest,
  proto.gaintain.Exercise,
  /**
   * @param {!proto.gaintain.ExerciseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gaintain.Exercise.deserializeBinary
);


/**
 * @param {!proto.gaintain.ExerciseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gaintain.Exercise)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gaintain.Exercise>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gaintain.ExerciseServiceClient.prototype.getExercise =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gaintain.ExerciseService/GetExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_GetExercise,
      callback);
};


/**
 * @param {!proto.gaintain.ExerciseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gaintain.Exercise>}
 *     Promise that resolves to the response
 */
proto.gaintain.ExerciseServicePromiseClient.prototype.getExercise =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gaintain.ExerciseService/GetExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_GetExercise);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gaintain.Exercise,
 *   !proto.gaintain.Exercise>}
 */
const methodDescriptor_ExerciseService_UpdateExercise = new grpc.web.MethodDescriptor(
  '/gaintain.ExerciseService/UpdateExercise',
  grpc.web.MethodType.UNARY,
  proto.gaintain.Exercise,
  proto.gaintain.Exercise,
  /**
   * @param {!proto.gaintain.Exercise} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gaintain.Exercise.deserializeBinary
);


/**
 * @param {!proto.gaintain.Exercise} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gaintain.Exercise)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gaintain.Exercise>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gaintain.ExerciseServiceClient.prototype.updateExercise =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gaintain.ExerciseService/UpdateExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_UpdateExercise,
      callback);
};


/**
 * @param {!proto.gaintain.Exercise} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gaintain.Exercise>}
 *     Promise that resolves to the response
 */
proto.gaintain.ExerciseServicePromiseClient.prototype.updateExercise =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gaintain.ExerciseService/UpdateExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_UpdateExercise);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.gaintain.ExerciseRequest,
 *   !proto.gaintain.Exercise>}
 */
const methodDescriptor_ExerciseService_DeleteExercise = new grpc.web.MethodDescriptor(
  '/gaintain.ExerciseService/DeleteExercise',
  grpc.web.MethodType.UNARY,
  proto.gaintain.ExerciseRequest,
  proto.gaintain.Exercise,
  /**
   * @param {!proto.gaintain.ExerciseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.gaintain.Exercise.deserializeBinary
);


/**
 * @param {!proto.gaintain.ExerciseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.gaintain.Exercise)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.gaintain.Exercise>|undefined}
 *     The XHR Node Readable Stream
 */
proto.gaintain.ExerciseServiceClient.prototype.deleteExercise =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/gaintain.ExerciseService/DeleteExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_DeleteExercise,
      callback);
};


/**
 * @param {!proto.gaintain.ExerciseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.gaintain.Exercise>}
 *     Promise that resolves to the response
 */
proto.gaintain.ExerciseServicePromiseClient.prototype.deleteExercise =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/gaintain.ExerciseService/DeleteExercise',
      request,
      metadata || {},
      methodDescriptor_ExerciseService_DeleteExercise);
};


module.exports = proto.gaintain;

